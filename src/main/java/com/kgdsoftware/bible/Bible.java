package com.kgdsoftware.bible;

import com.kgdsoftware.bible.model.Book;
import com.kgdsoftware.bible.model.Chapter;
import com.kgdsoftware.bible.model.LastChapter;
import com.kgdsoftware.bible.model.Note;
import com.kgdsoftware.bible.model.Setting;
import com.kgdsoftware.bible.model.Status;
import com.kgdsoftware.bible.model.Verse;
import com.kgdsoftware.bible.model.Version;
import com.kgdsoftware.database.DatabaseUtils;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.sql.DatabaseMetaData;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.ListCellRenderer;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

/**
 *
 * @author henriwarren
 */
public class Bible extends javax.swing.JFrame implements
        GetBookTable.BookTableFinished,
        GetChapterTable.ChapterTableFinished,
        GetVersionTable.VersionTableFinished {

    private static Bible bible;
    public static boolean sPostingEnabled;
    
    private Status mStatus;
    private boolean mChapterTableLoaded = false;
    private boolean mBooksTableLoaded = false;
    private boolean mVersionTableLoaded = false;

    private StartFrame startFrame = null;
    private Executor mExecutor;
    
    
    /**
     * Creates new form Bible
     */
    private Bible(String[] args) {
        sPostingEnabled = true;
        
        initComponents();
        initTables(args);

        initTableMenu();
    }

//    public static void setURL(String url) {
//        mDomain = url;
//    }
//
//    public static String getURL() {
//        return mDomain;
//    }
    private void showTableActionPerformed(ActionEvent evt) {
        System.out.println("action performed: " + evt);
        System.out.println(" cmd: " + evt.getActionCommand());
        Pattern pattern = Pattern.compile("Show (\\w+)");
        Matcher matcher = pattern.matcher(evt.getActionCommand());
        if (matcher.find()) {
            String table = matcher.group(1);
            System.out.println("show table: " + table);

            if (table.equalsIgnoreCase("note")) {
                ListModel<Note> noteList = Note.query();
                for (int i = 0; i < noteList.getSize(); i++) {
                    System.out.println(noteList.getElementAt(i).toString());
                }
            }
        } else {
            System.err.print("no match: " + evt.getActionCommand());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButton1 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        booksList = new javax.swing.JList<>();
        progressBar = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        EditMenu = new javax.swing.JMenu();
        EditPreferences = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        SettingsMenu = new javax.swing.JMenu();
        enablePostCheckBox = new javax.swing.JCheckBoxMenuItem();
        fontMenuItem = new javax.swing.JMenuItem();
        DebugMenu = new javax.swing.JMenu();
        debugDatabases = new javax.swing.JMenuItem();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Bible");
        setPreferredSize(null);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.PAGE_AXIS));

        booksList.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        booksList.setCellRenderer(null);
        booksList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                booksListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(booksList);

        getContentPane().add(jScrollPane1);

        progressBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        progressBar.setPreferredSize(new java.awt.Dimension(152, 12));
        getContentPane().add(progressBar);

        EditMenu.setText("Edit");

        EditPreferences.setText("Preferences");
        EditMenu.add(EditPreferences);

        jMenuItem2.setText("jMenuItem2");
        EditMenu.add(jMenuItem2);

        jMenuBar1.add(EditMenu);

        SettingsMenu.setText("Settings");

        enablePostCheckBox.setSelected(true);
        enablePostCheckBox.setText("Enable Posting");
        enablePostCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enablePostCheckBoxActionPerformed(evt);
            }
        });
        SettingsMenu.add(enablePostCheckBox);

        fontMenuItem.setText("Change Font");
        fontMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontMenuItemActionPerformed(evt);
            }
        });
        SettingsMenu.add(fontMenuItem);

        jMenuBar1.add(SettingsMenu);

        DebugMenu.setText("Debug");

        debugDatabases.setText("Debug Database");
        debugDatabases.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                debugDatabasesActionPerformed(evt);
            }
        });
        DebugMenu.add(debugDatabases);

        jMenuBar1.add(DebugMenu);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 322, 556);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        DatabaseUtils.disconnect();
    }//GEN-LAST:event_formWindowClosing

    private void booksListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_booksListMouseClicked
        JList list = (JList) evt.getSource();
        if (mChapterTableLoaded) {
            if (evt.getClickCount() == 2) {
                int book = booksList.getSelectedIndex();
                ListModel dlm = booksList.getModel();
                Book thisBook = (Book) dlm.getElementAt(book);

                System.out.println("booksListMouseClicked Selected " + thisBook.getName());

                ChapterFrame cf = new ChapterFrame(thisBook);
                cf.setVisible(true);
            } else if (evt.getClickCount() == 3) {

            }
        } else {
            System.out.println("Chapter table not yet loaded");
        }
    }//GEN-LAST:event_booksListMouseClicked

    private void debugDatabasesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_debugDatabasesActionPerformed
        System.out.println("Debug Database");
        NoteList nl = new NoteList();
        nl.setVisible(true);
    }//GEN-LAST:event_debugDatabasesActionPerformed

    private void enablePostCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enablePostCheckBoxActionPerformed
        JCheckBoxMenuItem checkBox = (JCheckBoxMenuItem)(evt.getSource());
        sPostingEnabled = checkBox.isSelected();
    }//GEN-LAST:event_enablePostCheckBoxActionPerformed

    private void fontMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontMenuItemActionPerformed
        // TODO add your handling code here:
//        JDialog dialog = new FontSettingsDialog(this, true);
//        dialog.setVisible(true);
        JFontChooser fontChooser = new JFontChooser();
        int result = fontChooser.showDialog(this);
        if(result == JFontChooser.OK_OPTION) {
            Font font = fontChooser.getSelectedFont();
            System.out.println("Selected font: " + font);
            Setting.update("FontName", font.getFontName());
            Setting.update("FontSize", String.valueOf(font.getSize()));
            Setting.update("FontStyle", String.valueOf(font.getStyle()));      
        }
    }//GEN-LAST:event_fontMenuItemActionPerformed

    private void initTables(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                startFrame = new StartFrame();
                startFrame.setVisible(true);
            }
        });

        mExecutor = Executors.newFixedThreadPool(1);

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                startFrame.append("Connect to database.\n");
            }
        });

        DatabaseUtils.connect("bibleDB");
        Setting.create();
        initSettings(args);

        Status.create();    // or open Status table
        LastChapter.create();   // or open LastChapter table
        Note.create();

        Book.create();
        Status booksStatus = Status.query("Books");
        System.out.println("Books Table: " + booksStatus.toString());

        if (!booksStatus.getStatus().equals(Status.GOTTEN)) {
            booksStatus.setStatus(Status.GETTING).updateStatus();
            System.out.println("Books status: " + booksStatus.toString());

            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    startFrame.append("Get Books Table.\n");
                }
            });

            mExecutor.execute(new GetBookTable(this));

        } else {
            mBooksTableLoaded = true;
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    startFrame.append("Books Table loaded.\n");
                }
            });

        }

        Chapter.create();   // or open Chapter table
        Status chapterStatus = Status.query("Chapter");

        System.out.println("Chapter Table: " + chapterStatus.toString());

        if (!chapterStatus.getStatus().equals(Status.GOTTEN)) {
            chapterStatus.setStatus(Status.GETTING).updateStatus();
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    startFrame.append("Get Chapter Table.\n");
                }
            });

            mExecutor.execute(new GetChapterTable(this));
        } else {
            mChapterTableLoaded = true;
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    startFrame.append("Chapter table loaded.\n");
                }
            });

        }

        Version.create();       // create or open
        Status versionStatus = Status.query("Version");
        System.out.println("Version Table: " + versionStatus.toString());
        if (!versionStatus.getStatus().equals(Status.GOTTEN)) {
            versionStatus.setStatus(Status.GETTING).updateStatus();

            mExecutor.execute(new GetVersionTable(this));
        } else {
            mVersionTableLoaded = true;
        }

        if (mBooksTableLoaded && mChapterTableLoaded && mVersionTableLoaded) {
            displayBooks();
        }

    }

    private void initSettings(String[] args) {
        // A little weird, but getting the value will also set a default
        Setting.getString("FontName", "Lucida Grande");
        Setting.getInt("FontSize", 24);
        Setting.getInt("FontStyle", Font.BOLD);

        String url;
        if (args.length == 1) {
            url = "http://" + args[0];
        } else {
            //url = "http://kgdsoftware.net/HanksStudyBible";
            url = "http://localhost/";
        }
        Setting.getString("URL", url);
    }

    private void initTableMenu() {
        try {
            DatabaseMetaData meta = DatabaseUtils.connection.getMetaData();
            ResultSet res = meta.getTables(null, null, null, new String[]{"TABLE"});
            //System.out.println("List of tables: ");
            while (res.next()) {
                JMenuItem item = new JMenuItem();
                item.setText("Show " + res.getString("TABLE_NAME"));
                DebugMenu.add(item);
                item.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        showTableActionPerformed(evt);
                    }
                });
            }
            res.close();

        } catch (SQLException e) {

        }
    }

    public void displayBooks() {
        SwingUtilities.invokeLater(() -> {
            booksList.setCellRenderer(new BooksRenderer());
            booksList.setModel(Book.query());
            startFrame.setVisible(false);
            bible.setVisible(true);
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Bible.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Bible.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Bible.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Bible.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                bible = new Bible(args);
                //bible.setVisible(true);
                bible.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
            }
        });
    }

    @Override
    public void getBookTableFinished(String msg) {
        System.out.println("getBookTableFinished: " + msg);
        Status books1 = Status.query("Books");
        books1.setStatus(Status.GOTTEN).updateStatus();
        mBooksTableLoaded = true;
        if (mChapterTableLoaded && mVersionTableLoaded) {
            displayBooks();
        }
    }

    @Override
    public void getChapterTableFinished(String msg) {
        System.out.println("getChapterTableFinished: " + msg);
        Status ch1 = Status.query("Chapter");
        ch1.setStatus(Status.GOTTEN).updateStatus();
        mChapterTableLoaded = true;
        if (mBooksTableLoaded && mVersionTableLoaded) {
            displayBooks();
        }
    }

    @Override
    public void getVersionTableFinished(String msg) {
        System.out.println("getVersionTableFinished: " + msg);
        Status vs1 = Status.query("Version");
        vs1.setStatus(Status.GOTTEN).updateStatus();

        int count = Version.numberOfVersions();
        for (int i = 0; i < count; i++) {
            Version version = Version.get(i + 1);
            Verse.create(version.getAbbreviation());
        }
        if (mBooksTableLoaded && mChapterTableLoaded) {
            displayBooks();
        }
    }

    public static class BooksRenderer extends JLabel implements ListCellRenderer<Book> {
        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.

        @Override
        public Component getListCellRendererComponent(JList<? extends Book> list, Book value, int index, boolean isSelected, boolean cellHasFocus) {
            Color background;
            Color foreground;

            setFont(new Font("Lucida Grande", Font.BOLD, 18));
            setText(value.getName());
            setOpaque(true);

            if (isSelected) {
                background = Color.RED;
                foreground = Color.WHITE;
            } else {
                background = Color.WHITE;
                foreground = Color.BLACK;
            }

            setBackground(background);
            setForeground(foreground);

            return this;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu DebugMenu;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenuItem EditPreferences;
    private javax.swing.JMenu SettingsMenu;
    private javax.swing.JList<Book> booksList;
    private javax.swing.JMenuItem debugDatabases;
    private javax.swing.JCheckBoxMenuItem enablePostCheckBox;
    private javax.swing.JMenuItem fontMenuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
